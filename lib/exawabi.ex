defmodule ExAwabi do
  @moduledoc "README.md"
             |> File.read!()
             |> String.split("<!-- MDOC !-->")
             |> Enum.fetch!(1)

  use Rustler, otp_app: :exawabi, crate: "awabi_nif"

  @doc """
  Tokenize the string.

  ## Examples

      iex> ExAwabi.tokenize("すもももももももものうち")
      [
        {"すもも", "名詞,一般,*,*,*,*,すもも,スモモ,スモモ"},
        {"も", "助詞,係助詞,*,*,*,*,も,モ,モ"},
        {"もも", "名詞,一般,*,*,*,*,もも,モモ,モモ"},
        {"も", "助詞,係助詞,*,*,*,*,も,モ,モ"},
        {"もも", "名詞,一般,*,*,*,*,もも,モモ,モモ"},
        {"の", "助詞,連体化,*,*,*,*,の,ノ,ノ"},
        {"うち", "名詞,非自立,副詞可能,*,*,*,うち,ウチ,ウチ"}
      ]

  """
  @spec tokenize(binary) :: [binary]
  def tokenize(_s), do: error()

  @doc """
  Tokenize the string with `N` best matches.

  ## Examples

      iex> ExAwabi.tokenize_n_best("すもももももももものうち", 3)
      [
        [
          {"すもも", "名詞,一般,*,*,*,*,すもも,スモモ,スモモ"},
          {"も", "助詞,係助詞,*,*,*,*,も,モ,モ"},
          {"もも", "名詞,一般,*,*,*,*,もも,モモ,モモ"},
          {"も", "助詞,係助詞,*,*,*,*,も,モ,モ"},
          {"もも", "名詞,一般,*,*,*,*,もも,モモ,モモ"},
          {"の", "助詞,連体化,*,*,*,*,の,ノ,ノ"},
          {"うち", "名詞,非自立,副詞可能,*,*,*,うち,ウチ,ウチ"}
        ],
        [
          {"すもも", "名詞,一般,*,*,*,*,すもも,スモモ,スモモ"},
          {"も", "助詞,係助詞,*,*,*,*,も,モ,モ"},
          {"もも", "名詞,一般,*,*,*,*,もも,モモ,モモ"},
          {"もも", "名詞,一般,*,*,*,*,もも,モモ,モモ"},
          {"も", "助詞,係助詞,*,*,*,*,も,モ,モ"},
          {"の", "助詞,連体化,*,*,*,*,の,ノ,ノ"},
          {"うち", "名詞,非自立,副詞可能,*,*,*,うち,ウチ,ウチ"}
        ],
        [
          {"すもも", "名詞,一般,*,*,*,*,すもも,スモモ,スモモ"},
          {"もも", "名詞,一般,*,*,*,*,もも,モモ,モモ"},
          {"も", "助詞,係助詞,*,*,*,*,も,モ,モ"},
          {"もも", "名詞,一般,*,*,*,*,もも,モモ,モモ"},
          {"も", "助詞,係助詞,*,*,*,*,も,モ,モ"},
          {"の", "助詞,連体化,*,*,*,*,の,ノ,ノ"},
          {"うち", "名詞,非自立,副詞可能,*,*,*,うち,ウチ,ウチ"}
        ]
      ]

  """
  @spec tokenize_n_best(binary, integer) :: [[binary]]
  def tokenize_n_best(_s, _n), do: error()

  defp error, do: :erlang.nif_error(:nif_not_loaded)
end
